#ifndef PK2_MEDIA_ITEM_HPP_
#define PK2_MEDIA_ITEM_HPP_

#include <cstdint>
#include <ostream>
#include <string>
#include <vector>

namespace sro::pk2::ref {

using ItemId = int32_t;

struct Item {
	int32_t service;
	int32_t id;
	std::string codeName128;
	std::string objName128;
	std::string orgObjCodeName128;
	std::string nameStrID128;
	std::string descStrID128;
	uint8_t cashItem;
	uint8_t bionic;
	uint8_t typeId1;
	uint8_t typeId2;
	uint8_t typeId3;
	uint8_t typeId4;
	int32_t decayTime;
	uint8_t country;
	uint8_t rarity;
	uint8_t canTrade;
	uint8_t canSell;
	uint8_t canBuy;
	uint8_t canBorrow;
	uint8_t canDrop;
	uint8_t canPick;
	uint8_t canRepair;
	uint8_t canRevive;
	uint8_t canUse;
	uint8_t canThrow;
	int32_t price;
	int32_t costRepair;
	int32_t costRevive;
	int32_t costBorrow;
	int32_t keepingFee;
	int32_t sellPrice;
	int32_t reqLevelType1;
	uint8_t reqLevel1;
	int32_t reqLevelType2;
	uint8_t reqLevel2;
	int32_t reqLevelType3;
	uint8_t reqLevel3;
	int32_t reqLevelType4;
	uint8_t reqLevel4;
	int32_t maxContain;
	int16_t regionID;
	int16_t dir;
	int16_t offsetX;
	int16_t offsetY;
	int16_t offsetZ;
	int16_t speed1;
	int16_t speed2;
	int32_t scale;
	int16_t bCHeight;
	int16_t bCRadius;
	int32_t eventID;
	std::string assocFileObj128;
	std::string assocFileDrop128;
	std::string assocFileIcon128;
	std::string assocFile1_128;
	std::string assocFile2_128;
	int32_t maxStack;
	uint8_t reqGender;
	int32_t reqStr;
	int32_t reqInt;
	uint8_t itemClass;
	int32_t setID;
	float dur_L;
	float dur_U;
	float pd_L;
	float pd_U;
	float pdInc;
	float er_L;
	float er_U;
	float eRInc;
	float par_L;
	float par_U;
	float parInc;
	float br_L;
	float br_U;
	float md_L;
	float md_U;
	float mdInc;
	float mar_L;
	float mar_U;
	float marInc;
	float pdStr_L;
	float pdStr_U;
	float mdInt_L;
	float mdInt_U;
	uint8_t quivered;
	uint8_t ammo1_TID4;
	uint8_t ammo2_TID4;
	uint8_t ammo3_TID4;
	uint8_t ammo4_TID4;
	uint8_t ammo5_TID4;
	uint8_t speedClass;
	uint8_t twoHanded;
	int16_t range;
	float pAttackMin_L;
	float pAttackMin_U;
	float pAttackMax_L;
	float pAttackMax_U;
	float pAttackInc;
	float mAttackMin_L;
	float mAttackMin_U;
	float mAttackMax_L;
	float mAttackMax_U;
	float mAttackInc;
	float paStrMin_L;
	float paStrMin_U;
	float paStrMax_L;
	float paStrMax_U;
	float maInt_Min_L;
	float maInt_Min_U;
	float maInt_Max_L;
	float maInt_Max_U;
	float hr_L;
	float hr_U;
	float hRInc;
	float cHR_L;
	float cHR_U;
	int32_t param1;
	std::string desc1_128;
	int32_t param2;
	std::string desc2_128;
	int32_t param3;
	std::string desc3_128;
	int32_t param4;
	std::string desc4_128;
	int32_t param5;
	std::string desc5_128;
	int32_t param6;
	std::string desc6_128;
	int32_t param7;
	std::string desc7_128;
	int32_t param8;
	std::string desc8_128;
	int32_t param9;
	std::string desc9_128;
	int32_t param10;
	std::string desc10_128;
	int32_t param11;
	std::string desc11_128;
	int32_t param12;
	std::string desc12_128;
	int32_t param13;
	std::string desc13_128;
	int32_t param14;
	std::string desc14_128;
	int32_t param15;
	std::string desc15_128;
	int32_t param16;
	std::string desc16_128;
	int32_t param17;
	std::string desc17_128;
	int32_t param18;
	std::string desc18_128;
	int32_t param19;
	std::string desc19_128;
	int32_t param20;
	std::string desc20_128;
	uint8_t maxMagicOptCount;
	uint8_t childItemCount;

  // If this item is an elixir, this function returns a list of typeId3s for the items which this elixir applies to.
  std::vector<uint8_t> elixirTargetItemTypeId3s() const;
};

std::ostream& operator<<(std::ostream &stream, const Item &item);

} // namespace sro::pk2::ref

#endif // PK2_MEDIA_ITEM_HPP_